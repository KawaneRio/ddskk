#  -*- coding:utf-8 mode:org -*-
#+TITLE: GitHubによる開発の流れについて [README.git.ja]
#+STARTUP: showall
#+TEXT: この文章は org-mode で記述されています。


* はじめに

2014 年 12 月、DDSKK の開発ツールを GitHub へ変更したことに伴ない、GitHub を用いて開発に参加される方の作業の流れとして
工程の大まかな流れをまとめます。

DDSKK に特化していない箇所もありますが、
今後の開発工程の確立とともにこの文書は改訂されていく予定です。


* github 上にリポジトリを設置

github のアカウントはお持ちであるとします。

https://github.com/skk-dev/ddskk で "fork"します。

すると 自分のアカウントのページに fork したリポジトリができます。


* 手元のコンピュータにリポジトリを設置

github の自分のアカウントのページ中 repsoitories のタブを
選ぶと ddskk が存在しているはずなので、そこをクリックします。

自分の ddskk のページが開くはずなので、その右下を見ると
https 又は ssh 経由でローカルに clone するための URL の記載があります。

(github 側に push に必要な ssh の鍵を設定しておく必要があるので
github のヘルプを調べてみて下さい。)

手元の PC に git がインストールされていれば、この URL で clone でき
ます。

        $ git clone git@github.com:YOURNAME/ddskk.git     [ssh の例]

ここまでで 3つのリポジトリが出てきました。

      -  upstream ->  https://github.com/skk-dev/ddskk

      -  origin   ->  git@github.com:YOURACCOUNT/ddskk.git

      -  local    ->  手元の PC (origin から clone したもの)

local 中の .git/config にて upstream と origin を定義して
ない場合は、この段階で定義しておく必要があります。

[remote "origin"]

      -  url = git@github.com:YOURACCOUNT/ddskk.git

      -  fetch = +refs/heads/*:refs/remotes/origin/*

[remote "upstream"]

      -  url = git@github.com:skk-dev/ddskk.git

      -  fetch = +refs/heads/*:refs/remotes/upstream/*


* コントリビュータとしての作業の流れ

** upstream の最新版を追跡する方法

まずは、改良などせず最新版を追跡する方法を説明します。
local のデフォルトでは master というブランチが選択されていて
ここは、独自の改良を反映しないで下さい。ここは upstream
での反映を取り込む箇所のようです。独自の改良の成果は
別のブランチで実施します。成果は master との diff として
公表することになります。

upstream の master を local の master に取り込みます。

        $ git pull upstream master:master
                            {local:remote}

(設定なりでより短いコマンドラインにできたはずです。)


必要があるかどうかわからないのですが、次のコマンドラインで
local の master を origin の master に反映できます。

        $ git push origin master:master

これで

        upstream => local => origin

と変更を反映することができました。

** 改良する方法

では改良をしてみましょう。

改良の目的に応じて名前を
つけてそれをブランチ名とします。ここでは REFACTORします。
(特に大文字の必要はありません。)

        $ git branch REFACTOR
        $ git checkout REFACTOR

これで準備ができました。
念のため、現在いるブランチを確認しておきます。

        $ git branch
        * REFACTOR
          master

変更を加えてコミット (git add -u && git commit) したら

        $ git push origin REFACTOR:REFACTOR

とします。すると自分の github のページの ddskk の
リポジトリに REFACTOR というブランチが作られ、
local の変更がそこに格納(？)されます。

** プルリクエスト

自分の ddskk のページを開くと、読み直し(？)の緑のボタンのとなり
にブランチを選択するためのポップアップメニューがあり、そこで確認できます。
特に選択しなくとも push した直後にはバナーのような形式で
ページの上部に pull request を出すためのボタンが出現します。
ボタンを押すと upstream に対してプルリクエストが出ます。

レビュアーから書き直しの指示があると、ブランチ上で

        $ git rebase -i master

などとして、ブランチに修正を加えます。(これは git の本なりをご覧下さい。)
その後

        $ git push --force origin REFACTOR:REFACTOR

とすると、修正内容で origin 上のブランチを上書きできます。


* リポジトリの更新

自分の pull request が採用された場合や、自分が改良中に他の人の成果が upstream に
導入された場合を考えます。採用された pull request に使っていたブランチとは別の
ブランチで、別の改良作業 (OPTIMIZE) をしていたとします。特にその改良を長い期間かけて実施
している場合、upstream の master との差異が大きくなります。更新 (rebase) する
ことで差異を縮めることができます。

まず OPTIMIZE ブランチの作業内容について保存します。git stash を使うか、あ
るいはあとからわかる適当なログを書いて commit してしまいましょう。

次に最新の変更を master に取り込みます。

        $ git checkout master

        $ git pull upstream master:master


OPTIMIZE ブランチで溜め込んでいた独自の変更点を、最新の master に対する変
更として保存し直します。このとき master でなされた変更と OPTIMIZE 上での変更
の間で発生する conflict は、手動で解決する必要があります。

        $ git checkout OPTIMIZE

        $ git rebase master

* 不要となったブランチの削除

プルリクエストが採用されたあとは、local, origin の作業用ブランチを削除します。

local と origin のブランチは以下のコマンドで調べることができます。

        $ git branch -a

checkout 現在の作業用ブランチに * がついています。

上記で例として使いました REFACTOR ブランチを例として説明します。

まず、master ブランチに移動します。

        $ git checkout master

local のブランチを削除します。

        $ git branch -d REFACTOR

次いで origin のブランチも削除します。

        $ git push origin :REFACTOR

作業用ブランチが削除されたことを確認します。

        $ git branch -a

* その他

local に作成した branch の push 先として origin を指定していますが、
organization の中の人は organization のリポジトリ、すなわち
upstream にブランチを作成したり、あるいは upstream の master に
直接 push しても良いかもしれません。このあたりのバランスは良く
わかりません。

git/github が不慣れな場合は、慣れるまでは organization の外から
pull request を出せば良いかと思います。慣れたら、ささやかな変更は
直接 push しても良いと思います。
